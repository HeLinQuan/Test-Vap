C51 COMPILER V9.00   E2PROM_R_W                                                            04/15/2024 19:40:38 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE E2PROM_R_W
OBJECT MODULE PLACED IN .\Output\E2PROM_R_W.obj
COMPILER INVOKED BY: F:\KEIL5\C51\BIN\C51.EXE ..\..\Application\EEPROM_R_W\E2PROM_R_W.C OPTIMIZE(8,SPEED) BROWSE INCDIR(
                    -..\..\Application;..\..\User\INC;..\..\Libraries;..\..\Application\Buzzer_Driver;..\..\Application;..\..\Application\DIS
                    -PLAY;..\..\Application\TM1652;..\..\Application\WDT;..\..\Application\TIMER;..\..\Application\EEPROM_R_W;..\..\Applicati
                    -on\AD_WORK;..\..\Application\Fun_Handle;..\..\Application\KEY;..\..\Application\USART) DEBUG OBJECTEXTEND PRINT(.\List\E
                    -2PROM_R_W.lst) OBJECT(.\Output\E2PROM_R_W.obj)

line level    source

   1          #include "define.h"
   2          #define EEPROM_ADDR   0X3C00  //地址
   3          unsigned char xdata guc_Write_a[16] = {0x00,0x00,0x00,0x00,0x00};       //写入数据
   4          unsigned char xdata guc_Read_a[16] = {0x00};                    //用于存放读取的数据
   5          
   6          
   7          void  EEPROM_WRITE(void )
   8          {
   9   1          guc_Write_a[EE_WORK1_HOUR_H] = work1_hour/256 ;      //存储模式 
  10   1          guc_Write_a[EE_WORK1_HOUR_L] = work1_hour%256 ;
  11   1      
  12   1          guc_Write_a[EE_WORK2_HOUR_H] = work2_hour/256 ;      //存储模式 
  13   1          guc_Write_a[EE_WORK2_HOUR_L] = work2_hour%256 ;
  14   1      
  15   1          guc_Write_a[EE_WORK3_HOUR_H] = work3_hour/256 ;      //存储模式 
  16   1          guc_Write_a[EE_WORK3_HOUR_L] = work3_hour%256 ;
  17   1      
  18   1          guc_Write_a[EE_WORK4_HOUR_H] = work4_hour/256 ;      //存储模式 
  19   1          guc_Write_a[EE_WORK4_HOUR_L] = work4_hour%256 ;
  20   1      
  21   1          guc_Write_a[EE_WORK5_HOUR_H] = work5_hour/256 ;      //存储模式 
  22   1          guc_Write_a[EE_WORK5_HOUR_L] = work5_hour%256 ;
  23   1      
  24   1          guc_Write_a[EE_FRIST] = 0X5A ;
  25   1      
  26   1          guc_Write_a[EE_WORK_MIN] =  work_10min ;   //20分钟存储1次 
  27   1      
  28   1          Flash_EraseBlock(EEPROM_ADDR);                       //擦除地址0x3C00所在扇区
  29   1          Flash_WriteArr(EEPROM_ADDR,16,guc_Write_a);  //在地址0x3C00写入数据
  30   1      }
  31          
  32          /**
  33            * @说明       扇区擦除，约消耗5ms的时间
  34            * @参数       fui_Address ：被擦除的扇区内的任意一个地址
  35            * @返回值 无
  36            * @注         只要操作扇区里面的任意一个地址，就可以擦除此扇区
  37            */
  38          #pragma disable                                         //确保擦除时不会进中断导致擦除失败
  39          void Flash_EraseBlock(unsigned int fui_Address)
  40          {
  41   1              IAP_CMD = 0xF00F;                               //Flash解锁
  42   1              IAP_ADDR = fui_Address;                 //写入擦除地址
  43   1              IAP_CMD = 0xD22D;                               //选择操作方式， 扇区擦除
  44   1              IAP_CMD = 0xE11E;                               //触发后IAP_ADDRL&IAP_ADDRH指向0xFF，同时自动锁定
  45   1      }
  46          
  47          /**
  48            * @说明       写入一个字节数据到Flash里面
  49            * @参数       fui_Address ：FLASH地址
  50            *     @参数   fucp_SaveData：写入的数据
  51            * @返回值 无
C51 COMPILER V9.00   E2PROM_R_W                                                            04/15/2024 19:40:38 PAGE 2   

  52            * @注         写之前必须先对操作的扇区进行擦除
  53            */
  54          #pragma disable                                         //确保写入时不会进中断导致写入失败
  55          void FLASH_WriteData(unsigned char fuc_SaveData, unsigned int fui_Address)
  56          {
  57   1              IAP_DATA = fuc_SaveData;
  58   1              IAP_CMD=0xF00F;                                 //Flash解锁
  59   1              IAP_ADDR = fui_Address;
  60   1              IAP_CMD=0xB44B;                                 //字节编程
  61   1              IAP_CMD=0xE11E;                                 //触发一次操作
  62   1      }
  63          
  64          /**
  65            * @说明       写入任意长度的数据到FLASH里面
  66            * @参数       fui_Address ：FLASH起始地址
  67            *     @参数   fuc_Length ： 写入数据长度
  68            *                     取值范围：0x00-0xFF
  69            *     @参数   *fucp_SaveArr：写入的数据存放区域的首地址
  70            * @返回值 无
  71            * @注         写之前必须先对操作的扇区进行擦除
  72            */
  73          #pragma disable                                         //确保写入时不会进中断导致写入失败
  74          void Flash_WriteArr(unsigned int fui_Address,unsigned char fuc_Length,unsigned char *fucp_SaveArr)
  75          {
  76   1              unsigned char fui_i = 0;
  77   1              for(fui_i=0;fui_i<fuc_Length;fui_i++)
  78   1              {
  79   2                      FLASH_WriteData(*(fucp_SaveArr++), fui_Address++); 
  80   2              }
  81   1      }
  82          
  83          /**
  84            * @说明       从FLASH里面读取任意长度的数据
  85            * @参数       fui_Address ：FLASH起始地址
  86            *     @参数   fuc_Length ：读取数据长度
  87            *                     取值范围：0x00-0xFF
  88            *     @参数   *fucp_SaveArr：读取数据存放的区域首地址
  89            * @返回值 无
  90            * @注         无
  91            */
  92          void Flash_ReadArr1(unsigned int fui_Address,unsigned char fuc_Length,unsigned char *fucp_SaveArr)
  93          {
  94   1              while(fuc_Length--)
  95   1              *(fucp_SaveArr++)=*((unsigned char code *)(fui_Address++));//读取数据
  96   1      }
  97          
  98          
  99          
 100          
 101          void  EEPROM_INIT(void)
 102          {
 103   1              
 104   1              FREQ_CLK = 0x10;                                        //指明当前系统时钟
 105   1          
 106   1              Flash_ReadArr1(EEPROM_ADDR,16,guc_Read_a);      //读取地址0x3C00所在扇区
 107   1              
 108   1              if(guc_Read_a[EE_FRIST]!= 0X5a)
 109   1          {
 110   2              work1_hour  = 0 ;       //读取开机时间  
 111   2              work2_hour  = 0 ;  
 112   2              work3_hour  = 3 ;       //work3_hour、work4_hour 用来存储加热与制冷的 H、M、L  默认温度设置都为3-H
 113   2              work4_hour  = 3 ;    
C51 COMPILER V9.00   E2PROM_R_W                                                            04/15/2024 19:40:38 PAGE 3   

 114   2              work5_hour  = 3 ;       //work4_hour 用来存储出水量1：180ml、2:250ml、3:500ml、4:1000ml 默认为500m
             -l
 115   2              work_10min  = 0 ; 
 116   2              EEPROM_WRITE( ) ;
 117   2          }           //存储模式 
 118   1              else
 119   1              {
 120   2              work_10min  =  guc_Read_a[EE_WORK_MIN ] ; 
 121   2              work1_hour  = (unsigned int)((guc_Read_a[EE_WORK1_HOUR_H]<<8)|guc_Read_a[EE_WORK1_HOUR_L]) ;      
             - //读取开机时间       
 122   2              work2_hour  = (unsigned int)((guc_Read_a[EE_WORK2_HOUR_H]<<8)|guc_Read_a[EE_WORK2_HOUR_L]) ;  
 123   2              work3_hour  = (unsigned int)((guc_Read_a[EE_WORK3_HOUR_H]<<8)|guc_Read_a[EE_WORK3_HOUR_L]) ;      
             - //读取开机时间       
 124   2              work4_hour  = (unsigned int)((guc_Read_a[EE_WORK4_HOUR_H]<<8)|guc_Read_a[EE_WORK4_HOUR_L]) ;  
 125   2              work5_hour  = (unsigned int)((guc_Read_a[EE_WORK5_HOUR_H]<<8)|guc_Read_a[EE_WORK5_HOUR_L]) ;  
 126   2              }
 127   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    503    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
